#!/usr/bin/env bash
# tag-and-release
# Summary: tag and release a build of this codebase. Can create a major, minor,
#   patch, or temprorary release.

set -e

BOWER_COMPONENTS="./bower_components"
BRANCH_NAME_RELEASE="master"
HELPERS_DIR="./scripts/helpers"
LOG_PREFIX="[RELEASE]"
NODE_MODULES="./node_modules"
NODE_BIN="$NODE_MODULES/.bin"
RELEASE_TYPE="$1"                     # major, minor, patch, temp
OLD_PKG_JSON="$(cat ./package.json)"
IS_TEMP_RELEASE=false

function secho {
  echo "$LOG_PREFIX [$(date)] $1"
}

if [ -z "$RELEASE_TYPE" ]; then
  secho "Must provide a relase type to this command ('major', 'minor', 'patch', 'temp'), exiting..."
  exit 1
elif [ "$RELEASE_TYPE" = "temp" ]; then
  IS_TEMP_RELEASE=true
fi

secho "Starting release process..."
BRANCH_NAME="$(git symbolic-ref --short HEAD)"
if [ $IS_TEMP_RELEASE = true ]; then
  secho "Releasing a temporary dist for current branch '$BRANCH_NAME'"
elif [ "$BRANCH_NAME" = "$BRANCH_NAME_RELEASE" ]; then
  secho "On releasable branch '$BRANCH_NAME_RELEASE'"
else
  secho "You are currently on branch '$BRANCH_NAME', please switch to '$BRANCH_NAME_RELEASE' before running this command, exiting..."
  exit 1
fi

# trap errors/stops and undo changes this script made to this directory
function cleanup_at_exit {
  if [ "$?" = "1" ]; then
    echo "$OLD_PKG_JSON" > ./package.json
  fi
  secho "Resetting local checkout"
  git checkout "$BRANCH_NAME" --quiet
  rm -rf dist/ || true
}
trap cleanup_at_exit EXIT

secho "Check that npm dependencies are in place"
if [ ! -d "$NODE_MODULES" ]; then
  npm install
else
  npm update
fi

secho "Check that bower dependencies are in place"
if [ -d "$BOWER_COMPONENTS" ]; then
  "$NODE_BIN"/bower update
else
  "$NODE_BIN"/bower install
fi

secho "Linting"
if [ ! "$(npm lint)" ]; then
  secho "Please fix lint errors before releasing."
  exit 1
fi

secho "Running tests"
if [ ! "$(npm test)" ]; then
  secho "Please fix tests before releasing."
  exit 1
fi

if [ $IS_TEMP_RELEASE = true ]; then
  NEW_VERSION="temp-$(git rev-parse HEAD | cut -c 1-7)-$BRANCH_NAME"
  secho "Releasing temporary tag @$NEW_VERSION"
else
  secho "Increasing $RELEASE_TYPE version"
  node $HELPERS_DIR/version-up.js ./package.json "$RELEASE_TYPE"
  NEW_VERSION="$(node $HELPERS_DIR/version-read ./package.json)"

  secho "Commiting updated version"
  git add package.json
  git commit -m "Update package version to $NEW_VERSION"
fi

# put release into its own single commit detached from any other history
secho "Checking out detached HEAD"
git checkout "$(git rev-parse HEAD)" --quiet

secho "Running build"
if [ ! "$(npm run build)" ]; then
  secho "Please fix build errors before releasing."
  exit 1
fi

secho "Adding dist to detached HEAD"
git add -f 'dist/*'

secho "Tagging and Releasing"
git commit --allow-empty --quiet -m "build for tag: $NEW_VERSION"
git tag "$NEW_VERSION"
git push origin "$NEW_VERSION" && git push origin --tags
git checkout "$BRANCH_NAME" && git push origin "$BRANCH_NAME"

node_modules/.bin/onionsay "NEW VERSION: $NEW_VERSION"
